<?xml version="1.0"?>

<project name="planconvert" basedir="." default="all">

    <property name="main-class"   value="plan.Convert"/>

    <property name="plan.version" value="0.7.0"/>
    <property name="plan.dtd.dir" value="${basedir}/../../schema"/>
    <property name="plan.dtd"     value="plan-${plan.version}.dtd"/>

    <property name="mpxj.version" value="9.8.2"/>
    <property name="mpxj.url"     value="https://sourceforge.net/projects/mpxj/files/mpxj/Version%20${mpxj.version}/mpxj-${mpxj.version}.zip"/>
    <property name="mpxj.dir"     value="${basedir}/mpxj"/>
    <property name="cp"           value="${mpxj.dir}/*.jar:${mpxj.dir}/lib/*.jar"/>

    <path id="classpath">
        <fileset dir="${mpxj.dir}" includes="**/*.jar"/>
    </path>

    <property name="wget"  value="wget"/>
    <property name="unzip" value="unzip"/>

    <property name="download.dir" value="${basedir}/download"/>
    <property name="src.dir"      value="${basedir}/src"/>
    <property name="build.dir"    value="${basedir}/build"/>
    <property name="classes.dir"  value="${build.dir}/classes"/>
    <property name="jar.dir"      value="${basedir}/jar"/>
    <property name="schema.dir"   value="${src.dir}/plan/schema"/>

    <target name="clean-download">
        <delete dir="${download.dir}"/>
    </target>

    <target name="clean-mpxj">
        <delete dir="${mpxj.dir}"/>
    </target>

    <target name="clean-jar">
        <delete dir="${jar.dir}"/>
    </target>

    <target name="clean-build">
        <delete dir="${build.dir}"/>
    </target>

    <target name="clean-schema">
        <delete dir="${schema.dir}"/>
    </target>

    <target name="clean-all" depends="clean-build,clean-jar,clean-schema,clean-download"/>

    <target name="get-mpxj" depends="clean-download, clean-mpxj">
        <mkdir dir="${download.dir}"/>
        <exec executable="${wget}">
            <arg line="-nv -P ${download.dir} ${mpxj.url}"/>
        </exec>
        <exec executable="${unzip}">
            <arg line="${download.dir}/mpxj-${mpxj.version}.zip"/>
        </exec>
    </target>

    <target name="xjc" depends="clean-schema" description="JAXB must be installed">
        <mkdir dir="${schema.dir}"/>
        <exec executable="xjc">
            <arg line="-dtd ${plan.dtd.dir}/${plan.dtd} -d ${src.dir} -p plan.schema" />
        </exec>
    </target>

    <target name="compile" depends="clean-build">
        <mkdir dir="${classes.dir}"/>
        <javac srcdir="${src.dir}" destdir="${classes.dir}" classpathref="classpath"/>
    </target>

    <target name="jar" depends="clean-jar,compile">
        <mkdir dir="${jar.dir}"/>
        <jar destfile="${jar.dir}/${ant.project.name}.jar" basedir="${classes.dir}">
            <zipgroupfileset dir="${mpxj.dir}" includes="mpxj.jar"/>
            <zipgroupfileset dir="${mpxj.dir}/lib" includes="*.jar" excludes="junit*"/><!--,jsoup*,stax-ex*,jakarta*,jgoodies*,Fast*,hamcrest*,istack*,jcl-over*,slf*,SpareBits*"/>-->
            <manifest>
                <attribute name="Main-Class" value="${main-class}"/>
                <attribute name="Class-Path" value= "${cp}"/>
            </manifest>
        </jar>
    </target>

    <target name="run">
        <java fork="true" classname="${main-class}">
            <classpath>
                <path refid="classpath"/>
                <path location="${jar.dir}/${ant.project.name}.jar"/>
            </classpath>
            <arg value="${basedir}/test/New Product.mpp"/>
            <arg value="${basedir}/test/t.plan"/>
        </java>
    </target>

    <target name="all" depends="get-mpxj,xjc,jar"/>

    <property name="test-class" value="TestConvert"/>
    <property name="test.dir" value="${basedir}/test"/>
    <property name="test.data.dir" value="${test.dir}/data"/>
    <property name="result.dir" value="${test.dir}/result"/>
    <target name="clean-test">
        <delete dir="${result.dir}"/>
        <mkdir dir="${result.dir}"/>
    </target>
    <target name="run-test" depends="clean-test">
        <exec executable="java">
            <arg line="-cp ${jar.dir}/${ant.project.name}.jar ${test-class}"/>
            <arg value="${test.data.dir}"/>
            <arg value="${result.dir}"/>
            <arg value="${test.dir}/test.log"/>
        </exec>
    </target>

</project>
